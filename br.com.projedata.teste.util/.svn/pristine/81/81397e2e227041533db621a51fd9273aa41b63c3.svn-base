package br.com.projedata.teste.util.recursos;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;

public class Acao {

	private WebDriver webDriver;

	public Acao(WebDriver driver) {
		this.webDriver = driver;
	}

	public WebElement localizarElemento(By elemento) {
		return webDriver.findElement(elemento);
	}

	public List<WebElement> localizarElementos(By elemento) {
		return webDriver.findElements(elemento);
	}

	public void escreverNoElemento(By elemento, CharSequence valor) {
		localizarElemento(elemento).sendKeys(valor);
	}

	public void escreverNoElementoNaPosicao(By elemento, int posicao, CharSequence valor) {
		localizarElementoNaPosicao(elemento, posicao).sendKeys(valor);
	}

	public WebElement localizarElementoNaPosicao(By elemento, int posicao) {
		return localizarElementos(elemento).get(posicao);
	}

	public void clicarNoElemento(By elemento) {
		localizarElemento(elemento).click();
	}

	public void clicarNoElemento(By elemento, int posicao) {
		localizarElementoNaPosicao(elemento, posicao).click();
	}

	public void selecionarNoElemento(By elemento, String valor) {
		new Select(localizarElemento(elemento)).selectByVisibleText(valor);
	}

	public void selecionarNoElementoPeloValor(By elemento, String valor) {
		new Select(localizarElemento(elemento)).selectByValue(valor);
	}

	public void selecionarNoElementoPeloValor(By elemento, int posicao, String valor) {
		new Select(localizarElementoNaPosicao(elemento, posicao)).selectByValue(valor);
	}

	public void selecionarNoElemento(By elemento, int posicao, String valor) {
		new Select(localizarElementoNaPosicao(elemento, posicao)).selectByVisibleText(valor);
	}

	public Select buscarObjetoTipoSelect(By elemento, int posicao) {
		return new Select(localizarElementoNaPosicao(elemento, posicao));
	}

	public void deselecionarNoElemento(By elemento, String valor) {
		new Select(localizarElemento(elemento)).deselectByVisibleText(valor);
	}

	public void limparElemento(By elemento) {
		escreverNoElemento(elemento, Keys.CONTROL + "a");
		escreverNoElemento(elemento, Keys.DELETE);
	}

	public void limparElementoNaPosicao(By elemento, int posicao) {
		escreverNoElementoNaPosicao(elemento, posicao, Keys.CONTROL + "a");
		escreverNoElementoNaPosicao(elemento, posicao, Keys.DELETE);
	}

	public void limparParteDeUmTexto(By elemento, String deletar) {
		String conteudo = retornarValorDoElemento(elemento);
		escreverNoElemento(elemento, conteudo.replace(deletar, ""));
	}

	public void posicionarFocoNoElemento(Rotina rotina, By elemento) {
		posicionarFocoNoElementoNaPosicao(rotina, elemento, 0);
	}

	public void posicionarFocoNoElementoNaPosicao(Rotina rotina, By elemento, int posicao) {
		String id = retornarValorAtributoDoElementoNaPosicao(elemento, posicao, "id");
		if (!id.isEmpty()) {
			executarJavaScriptNaRotina("document.getElementById('" + id + "').focus()");
		} else {
			String name = retornarValorAtributoDoElementoNaPosicao(elemento, posicao, "name");
			if (!name.isEmpty()) {
				executarJavaScriptNaRotina("document.getElementsByName('" + name + "')[0].focus()");
			} else {
				String classe = retornarValorAtributoDoElementoNaPosicao(elemento, posicao, "class");
				executarJavaScriptNaRotina("document.getElementsByClassName('" + classe + "')[0].focus()");
			}
		}
		rotina.aguardarProcessarRotina();
	}

	private Object executarJavaScriptNaRotina(String script) {
		JavascriptExecutor jse = (JavascriptExecutor) webDriver;
		return jse.executeScript(script);
	}

	private String retornarValorAtributoDoElemento(By elemento, String atributo) {
		return retornarValorAtributoDoElementoNaPosicao(elemento, 0, atributo);
	}

	private String retornarValorAtributoDoElementoNaPosicao(By elemento, int posicao, String atributo) {
		return localizarElementoNaPosicao(elemento, posicao).getAttribute(atributo);
	}

	public void clicarNoElementoPorCoordenada(int x, int y) {
		Actions action = new Actions(webDriver);
		action.moveByOffset(x, y).click().build().perform();
	}

	public String retornarValorDoElemento(By elemento) {
		return retornarValorAtributoDoElemento(elemento, "value");
	}

	public String retornarValorDoElementoNaPosicao(By elemento, int posicao) {
		return retornarValorAtributoDoElementoNaPosicao(elemento, posicao, "value");
	}

	public String retornarValorSelecionadoNoElemento(By elemento) {
		Select selecionado = new Select(localizarElemento(elemento));
		return selecionado.getFirstSelectedOption().getText();
	}

	public boolean elementoEstaHabilitado(By barraRolagem) {
		return localizarElemento(barraRolagem).isEnabled();
	}

	public void selecionarElementoComDeterminadoValorEmUmBloco(String valor, By elemento, Rotina rotina, String idBarraRolagem) {
		rotina.aguardarProcessarRotina();
		clicarNoElemento(elemento, 0);
		rotina.aguardarProcessarRotina();
		rotina.limparCampoERealizarNovaConsulta();
		int posicao = 0;
		while (!retornarValorDoElementoNaPosicao(elemento, posicao).equals(valor)) {
			By barraRolagemProximo = By
					.xpath("//*[@id='" + idBarraRolagem + "']//following-sibling::div[@class='proximo botao-navegacao'][1]");
			By barraRolagemProximoDesabilitada = By
					.xpath("//*[@id='" + idBarraRolagem + "']//following-sibling::div[@class='proximo botao-navegacao desabilitado'][1]");
			if (localizarElementos(barraRolagemProximoDesabilitada).isEmpty()) {
				clicarNoElemento(barraRolagemProximo);
				rotina.aguardarProcessarRotina();
				posicao = -1;
			}
			posicao++;
		}
		clicarNoElemento(elemento, posicao);
		rotina.aguardarProcessarRotina();
	}

}
