package br.com.projedata.arcturus.teste.testes;

import static br.com.projedata.arcturus.teste.webelements.Teste02Elementos.campoCodigo;
import static br.com.projedata.arcturus.teste.webelements.Teste02Elementos.campoValorBlocoMaster;

import org.openqa.selenium.Keys;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import br.com.projedata.arcturus.teste.metodosgenericos.AtualizadorMetodos;
import br.com.projedata.arcturus.teste.metodosgenericos.ConstrutorTelasMetodos;
import br.com.projedata.arcturus.teste.metodosgenericos.LoginMetodos;
import br.com.projedata.arcturus.teste.recursos.TesteGenerico;

public class teste extends TesteGenerico {

	String elementoFocado;
	LoginMetodos login;
	AtualizadorMetodos atualiza;
	ConstrutorTelasMetodos metodosConstrutor;

	@Parameters(value = { "login", "senha", "base" })
	@Test(testName = "id: ?? - Testar consulta utilizando operador maior ou igual.")
	public void testarConsultaComOperadorMaiorOuIgual(String usuario, String senha, String base) {
		login.logar(usuario, senha, base);
		rotina.selecionarRotina("teste02");
		acao.clicarNoElemento(campoValorBlocoMaster);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(rotina.botaoLimparConsulta);
		rotina.aguardarProcessarRotina();
		acao.escreverNoElemento(campoCodigo, ">=666");
		acao.clicarNoElemento(rotina.botaoConsultar);
		rotina.aguardarProcessarRotina();
		String valorAtual = acao.retornarValorDoElemento(campoCodigo);
		teclado.pressionarTeclaDeControle(Keys.ARROW_UP);
		rotina.aguardarProcessarRotina();
		testar.passouSeValorContem(valorAtual, acao.retornarValorDoElemento(campoCodigo));
		teclado.pressionarTeclaDeControle(Keys.ARROW_DOWN);
		rotina.aguardarProcessarRotina();
		testar.passouSeValorContem(acao.retornarValorDoElemento(campoCodigo), "777");
	}

	@Test(testName = "id: ?? - Testar consulta utilizando operador maior", dependsOnMethods = { "testarConsultaComOperadorMaiorOuIgual" })
	public void testarConsultaComOperadorMaior() {
		acao.clicarNoElemento(campoValorBlocoMaster);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(rotina.botaoLimparConsulta);
		rotina.aguardarProcessarRotina();
		acao.escreverNoElemento(campoCodigo, ">666");
		acao.clicarNoElemento(rotina.botaoConsultar);
		rotina.aguardarProcessarRotina();
		String valorAtual = acao.retornarValorDoElemento(campoCodigo);
		teclado.pressionarTeclaDeControle(Keys.ARROW_UP);
		rotina.aguardarProcessarRotina();
		testar.passouSeValorContem(valorAtual, acao.retornarValorDoElemento(campoCodigo));
		testar.passouSeValorContem(acao.retornarValorDoElemento(campoCodigo), "777");
		teclado.pressionarTeclaDeControle(Keys.ARROW_DOWN);
		rotina.aguardarProcessarRotina();
		testar.passouSeAtributoDoElementoForNulo(campoCodigo, "value");
	}

	@Test(testName = "id: ?? - Testar consulta utilizando operador menor ou igual", dependsOnMethods = { "testarConsultaComOperadorMaior" })
	public void testarConsultaComOperadorMenorOuIgual() {
		acao.clicarNoElemento(campoValorBlocoMaster);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(rotina.botaoLimparConsulta);
		rotina.aguardarProcessarRotina();
		acao.escreverNoElemento(campoCodigo, "<=222");
		acao.clicarNoElemento(rotina.botaoConsultar);
		rotina.aguardarProcessarRotina();
		String valorAtual = acao.retornarValorDoElemento(campoCodigo);
		teclado.pressionarTeclaDeControle(Keys.ARROW_UP);
		rotina.aguardarProcessarRotina();
		testar.passouSeValorContem(valorAtual, acao.retornarValorDoElemento(campoCodigo));
		testar.passouSeValorContem(acao.retornarValorDoElemento(campoCodigo), "111");
		teclado.pressionarTeclaDeControle(Keys.ARROW_DOWN);
		rotina.aguardarProcessarRotina();
		teclado.pressionarTeclaDeControle(Keys.ARROW_DOWN);
		rotina.aguardarProcessarRotina();
		testar.passouSeAtributoDoElementoForNulo(campoCodigo, "value");
	}

	@Test(testName = "id: ?? - Testar consulta utilizando operador menor", dependsOnMethods = { "testarConsultaComOperadorMenorOuIgual" })
	public void testarConsultaComOperadorMenor() {
		acao.clicarNoElemento(campoValorBlocoMaster);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(rotina.botaoLimparConsulta);
		rotina.aguardarProcessarRotina();
		acao.escreverNoElemento(campoCodigo, "<222");
		acao.clicarNoElemento(rotina.botaoConsultar);
		rotina.aguardarProcessarRotina();
		String valorAtual = acao.retornarValorDoElemento(campoCodigo);
		teclado.pressionarTeclaDeControle(Keys.ARROW_UP);
		rotina.aguardarProcessarRotina();
		testar.passouSeValorContem(valorAtual, acao.retornarValorDoElemento(campoCodigo));
		testar.passouSeValorContem(acao.retornarValorDoElemento(campoCodigo), "111");
		teclado.pressionarTeclaDeControle(Keys.ARROW_DOWN);
		rotina.aguardarProcessarRotina();
		testar.passouSeAtributoDoElementoForNulo(campoCodigo, "value");
	}

	@Test(testName = "id: ?? - Testar consulta utilizando operador diferente", dependsOnMethods = { "testarConsultaComOperadorMenor" })
	public void testarConsultaComOperadorDiferente() {
		acao.clicarNoElemento(campoValorBlocoMaster);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(rotina.botaoLimparConsulta);
		rotina.aguardarProcessarRotina();
		acao.escreverNoElemento(campoCodigo, "!222");
		acao.clicarNoElemento(rotina.botaoConsultar);
		rotina.aguardarProcessarRotina();
		String valorAtual = acao.retornarValorDoElemento(campoCodigo);
		teclado.pressionarTeclaDeControle(Keys.ARROW_UP);
		rotina.aguardarProcessarRotina();
		testar.passouSeValorContem(valorAtual, acao.retornarValorDoElemento(campoCodigo));
		testar.passouSeValorContem(acao.retornarValorDoElemento(campoCodigo), "111");
		teclado.pressionarTeclaDeControle(Keys.ARROW_DOWN);
		rotina.aguardarProcessarRotina();
		testar.passouSeAtributoDoElementoForNulo(campoCodigo, "333");
	}

}
