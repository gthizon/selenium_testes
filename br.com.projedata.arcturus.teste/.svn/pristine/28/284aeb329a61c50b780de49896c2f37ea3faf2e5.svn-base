package br.com.projedata.arcturus.teste.testes;

import static br.com.projedata.arcturus.teste.webelements.Parc008Elementos.botaoCarregarConsulta;
import static br.com.projedata.arcturus.teste.webelements.Parc008Elementos.campoChaveConsulta;
import static br.com.projedata.arcturus.teste.webelements.Parc008Elementos.campoColunaConsulta;
import static br.com.projedata.arcturus.teste.webelements.Parc008Elementos.campoComando;
import static br.com.projedata.arcturus.teste.webelements.Parc008Elementos.campoIdConsulta;
import static br.com.projedata.arcturus.teste.webelements.Parc008Elementos.campoNomeConsulta;

import java.awt.AWTException;

import org.openqa.selenium.Keys;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import br.com.projedata.arcturus.teste.metodosgenericos.LoginMetodos;
import br.com.projedata.arcturus.teste.metodosgenericos.Pger001Metodos;
import br.com.projedata.arcturus.teste.recursos.TesteGenerico;
import br.com.projedata.arcturus.teste.webelements.AtualizadorElementos;

public class TesteParc008 extends TesteGenerico {

	LoginMetodos log;
	AtualizadorElementos atualizador;
	Pger001Metodos ger001;
	String idRegistro;

	@Parameters(value = { "login", "senha", "base" })
	@Test(testName = "id: 1 - Testar quantidade de caracteres no campo textarea.")
	public void quantidadeCaracteresTextArea(String login, String senha, String base) {
		log = new LoginMetodos(this);
		log.logar(login, senha, base);
		rotina.selecionarRotina("arc008");
		acao.clicarNoElemento(rotina.botaoLimparConsulta);
		rotina.aguardarProcessarRotina();
		acao.escreverNoElemento(campoIdConsulta, "3");
		acao.clicarNoElemento(rotina.botaoConsultar);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(campoComando);
		teclado.pressionarTeclaDeControle(Keys.ARROW_DOWN);
		String texto = "Fim do texto!!!";
		acao.escreverNoElemento(campoComando, texto);
		acao.clicarNoElemento(rotina.botaoSalvar);
		espera.aguardarElementoEstarVisivel(msg.mensagemNenhumRegistroAlterado);
		teclado.pressionarTeclaDeControle(Keys.ESCAPE);
		espera.aguardarElementoDesaparecer(msg.mensagemNenhumRegistroAlterado);
	}

	@Test(testName = "id: 2 - Inserir nova consulta.", dependsOnMethods = { "quantidadeCaracteresTextArea" })
	public void inserirNovaConsulta() {
		rotina.aguardarProcessarRotina();
		teclado.pressionarTeclaDeControle(Keys.F6);
		rotina.aguardarProcessarRotina();
		acao.escreverNoElemento(campoNomeConsulta, "Consulta Auto");
		acao.escreverNoElemento(campoChaveConsulta, "Consulta Auto");
		acao.escreverNoElemento(campoComando, "select * from testeconsulta");
		rotina.salvarEAguardarMensagemRegistrosAlterados();
		teclado.pressionarTeclaDeControle(Keys.ESCAPE);
		espera.aguardarElementoDesaparecer(msg.mensagemNotificacao);
		acao.posicionarFocoNoElemento(rotina, botaoCarregarConsulta);
		acao.clicarNoElemento(botaoCarregarConsulta);
		msg.aguardarMensagem("Colunas carregadas com sucesso");
		teclado.pressionarTeclaDeControle(Keys.ESCAPE);
		msg.aguardarMensagemDesaparecer("Colunas carregadas com sucesso");
		testar.passouSeAtributoDoElementoNaoForNulo(campoColunaConsulta, "value");
	}

	@Test(testName = "id: 3 - Excluir consulta.", dependsOnMethods = { "inserirNovaConsulta" })
	public void excluirConsulta() {
		acao.clicarNoElemento(campoColunaConsulta, 0);
		while (!acao.localizarElementoNaPosicao(campoColunaConsulta, 0).getAttribute("value").isEmpty()) {
			teclado.pressionarConjuntoDeTeclasDeControle(Keys.SHIFT, Keys.F6);
			rotina.aguardarProcessarRotina();
		}
		acao.clicarNoElemento(rotina.botaoSalvar);
		espera.aguardarElementoEstarVisivel(msg.mensagemRegistrosAlterados);
		teclado.pressionarTeclaDeControle(Keys.ESCAPE);
		espera.aguardarElementoDesaparecer(msg.mensagemRegistrosAlterados);
		acao.clicarNoElemento(campoIdConsulta);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(rotina.botaoExcluir);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(rotina.botaoSalvar);
		espera.aguardarElementoEstarVisivel(msg.mensagemRegistrosAlterados);
		teclado.pressionarTeclaDeControle(Keys.ESCAPE);
		espera.aguardarElementoDesaparecer(msg.mensagemRegistrosAlterados);
	}
	
	@Parameters(value = { "login", "senha", "baseHomo", "url2" })
	@Test(testName = "id: 4 - Acessar a base de homologacao e verificar se o cliente nao consegue alterar as consultas do sistema.", dependsOnMethods = { "excluirConsulta" })
	public void verificarSeClienteNaoConsegueAlterar(String login, String senha, String baseHomo, String url2) throws AWTException, InterruptedException {
		navegador.irParaNovaUrlEmNovaAba(url2);
		log.logar(login, senha, baseHomo);
		rotina.selecionarRotina("arc008");
		rotina.limparCampoERealizarNovaConsulta();
		espera.aguardarElementoEstarDesabilitado("arcconsultaNome-1");
		espera.aguardarElementoEstarDesabilitado("arcconsultaComandoConsulta-1");
		acao.clicarNoElemento("arcconsultacolunaColuna-4");
		rotina.aguardarProcessarRotina();
		teclado.pressionarTeclaDeControle(Keys.F6);
		teclado.pressionarTeclaDeControle(Keys.F6);
		espera.aguardarElementoEstarVisivel(msg.mensagemOperacaoNaoPermitida);
	}

}
