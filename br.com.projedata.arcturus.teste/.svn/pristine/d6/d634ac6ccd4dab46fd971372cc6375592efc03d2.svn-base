package br.com.projedata.arcturus.teste.testes;

import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.barraRolagemProximoRelatorio;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.barraRolagemProximoRelatorioDesabilitada;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.botaoExecutarHabilitado;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.campoCodigoRelatorio;

import java.awt.AWTException;
import java.io.IOException;
import java.util.ArrayList;

import org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import br.com.projedata.arcturus.teste.metodosgenericos.AtualizadorMetodos;
import br.com.projedata.arcturus.teste.metodosgenericos.ConstrutorTelasMetodos;
import br.com.projedata.arcturus.teste.metodosgenericos.LoginMetodos;
import br.com.projedata.arcturus.teste.recursos.Rotina;
import br.com.projedata.arcturus.teste.recursos.TesteGenerico;

public class teste extends TesteGenerico {

	public static String numeroAtualizacao;
	public static String numeroAtualizacaoDependente;
	private String versaoAtualizacaoLancada;
	private static String idDependente;
	private static String mensagemAtualizacaoComOsVinculada;
	String anexo1Linux = "Anexo1.txt";
	String anexo2Linux = "processo_testes'@#$~^áà.png";
	String anexo1Windows = "\\\\arquivos.prj\\qualidade\\Plano de Testes\\Plano_de_Testes.pdf";
	String anexo2Windows = "\\\\arquivos.prj\\qualidade\\Diversos\\processo_testes'@#$~^áà.png";
	String urlAdmin;

	Rotina rotina;
	String elementoFocado;
	LoginMetodos login;
	AtualizadorMetodos atualiza;
	ConstrutorTelasMetodos metodosConstrutor;

	@Parameters(value = { "login", "senha", "base" })
	@Test(testName = "id: 33 - Verificar se esta sendo possivel limpar o valor da combobox selecionando valor em branco")
	public void login(String usuario, String senha, String base)
			throws AWTException, InterruptedException, InvalidPasswordException, IOException {
		login = new LoginMetodos(this);
		rotina = new Rotina(webDriver);
		login.logar(usuario, senha, base);
		webDriver.findElement(By.cssSelector("body")).sendKeys(Keys.CONTROL +"\t");
	}

	@Test(testName = "id: 42 - Testar componente imagem do relatorio.", dependsOnMethods = {
			"login" })
	public void testarComponenteImagemDoRelatorio() throws InvalidPasswordException, IOException {
		rotina.selecionarRotina("ger001");
		selecionarRelatorioParaEdicao("rger10");
		acao.clicarNoElemento(botaoExecutarHabilitado);
		espera.aguardarElementoEstarVisivel(rotina.botaoProcessarFiltros);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(rotina.botaoProcessarFiltros);
		ArrayList<Integer> relatorios = new ArrayList<>();
		relatorios = rotina.verificarSeConteudoDoPdfPossuiImagens();
		for (int i = 0; i <= relatorios.size(); i++) {
			int tamanhoRelatorio = relatorios.get(i);
			System.out.println(tamanhoRelatorio);
			if (tamanhoRelatorio == 252717) {
				testar.testePassou();
				break;
			} else {
				testar.testeFalhou();
			}
		}
	}
	
	public void selecionarRelatorioParaEdicao(String relatorio) {
		rotina = new Rotina(webDriver);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(campoCodigoRelatorio, 0);
		rotina.aguardarProcessarRotina();
		rotina.limparCampoERealizarNovaConsulta();
		int posicao = 0;
		while (!rotina.buscarElementos(campoCodigoRelatorio).get(posicao).getAttribute("value").equals(relatorio)) {
			if (rotina.buscarElementos(barraRolagemProximoRelatorioDesabilitada).size() == 0) {
				acao.clicarNoElemento(barraRolagemProximoRelatorio);
				rotina.aguardarProcessarRotina();
				posicao = -1;
			}
			posicao++;
		}
		acao.clicarNoElemento(campoCodigoRelatorio, posicao);
		rotina.aguardarProcessarRotina();
	}

}
