package br.com.projedata.arcturus.teste.testes;

import static br.com.projedata.arcturus.teste.webelements.Parc001Elementos.campoCodigoArc001;
import static br.com.projedata.arcturus.teste.webelements.Parc001Elementos.campoCodigoBaseArc001;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.barraRolagemProximoRelatorio;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.barraRolagemProximoRelatorioDesabilitada;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.botaoBloquearDesabilitado;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.botaoClonarDesabilitado;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.botaoEditarDesabilitado;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.botaoExcluirDesabilitado;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.botaoExecutarHabilitado;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.botaoNovoRelatorio;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.campoCodigoRelatorio;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.fecharJanelaEmissaoRelatorio;
import static br.com.projedata.arcturus.teste.webelements.Pger001Elementos.filtroObrigatorio;

import java.io.IOException;
import java.util.ArrayList;

import org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException;
import org.openqa.selenium.Keys;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import br.com.projedata.arcturus.teste.metodosgenericos.AtualizadorMetodos;
import br.com.projedata.arcturus.teste.metodosgenericos.ConstrutorTelasMetodos;
import br.com.projedata.arcturus.teste.metodosgenericos.LoginMetodos;
import br.com.projedata.arcturus.teste.recursos.TesteGenerico;

public class teste extends TesteGenerico {

	String elementoFocado;
	LoginMetodos login;
	AtualizadorMetodos atualizador;
	ConstrutorTelasMetodos metodosConstrutor;

	@Parameters(value = { "login", "senha", "base" })
	@Test(testName = "id: ? - Testar permissão de acesso a rotina para o usuário", enabled = true)
	public void testarPermissaoDeAcesso(String usuario, String senha, String base) {
		login = new LoginMetodos(this);
		login.logar(usuario, senha, base);
		rotina.selecionarRotina("arc001", "p");
		acao.clicarNoElemento(campoCodigoArc001);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(rotina.botaoLimparConsulta);
		rotina.aguardarProcessarRotina();
		acao.escreverNoElemento(campoCodigoArc001, "05509522925");
		acao.clicarNoElemento(rotina.botaoConsultar);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(campoCodigoBaseArc001);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(rotina.botaoLimparConsulta);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento("arcusuarioacessoIdRotina", 0);
		acao.escreverNoElementoNaPosicao("arcusuarioacessoIdRotina", 0, "53");
		acao.clicarNoElemento(rotina.botaoConsultar);
		rotina.aguardarProcessarRotina();
		acao.selecionarNoElementoPeloValor("arcusuarioacessoPermissao", 0, "S");// Sem acesso rger2
		rotina.salvarEAguardarMensagemRegistrosAlterados();
		acao.clicarNoElemento(rotina.botaoLimparConsulta);
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento("arcusuarioacessoIdRotina", 0);
		acao.escreverNoElementoNaPosicao("arcusuarioacessoIdRotina", 0, "74");
		acao.clicarNoElemento(rotina.botaoConsultar);
		rotina.aguardarProcessarRotina();
		acao.selecionarNoElementoPeloValor("arcusuarioacessoPermissao", 0, "C");// Consulta rger5
		rotina.salvarEAguardarMensagemRegistrosAlterados();
		sairPortal();
		login.logar("gustavo.projedata", "guth055", "desenvolvimento");
		rotina.selecionarRotina("ger001");

		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(campoCodigoRelatorio, 0);
		rotina.aguardarProcessarRotina();
		rotina.limparCampoERealizarNovaConsulta();
		int posicao = 0;
		while (!acao.localizarElementos(campoCodigoRelatorio).get(posicao).getAttribute("value").equals("rger5")) {
			if (acao.localizarElementos(barraRolagemProximoRelatorioDesabilitada).size() == 0) {
				acao.clicarNoElemento(barraRolagemProximoRelatorio);
				rotina.aguardarProcessarRotina();
				posicao = -1;
			}
			posicao++;
		}
		testar.passouSeElementoEstiverHabilitado(botaoNovoRelatorio);
		testar.passouSeElementoEstiverHabilitado(botaoExecutarHabilitado);
		testar.passouSeElementoEstiverDesabilitado(botaoExcluirDesabilitado);
		testar.passouSeElementoEstiverDesabilitado(botaoEditarDesabilitado);
		testar.passouSeElementoEstiverDesabilitado(botaoBloquearDesabilitado);
		testar.passouSeElementoEstiverDesabilitado(botaoClonarDesabilitado);
	}

	@Test(testName = "id: ? - Testar usuário sem permissão para a rotina ", dependsOnMethods = {
			"testarPermissaoDeAcesso" }, enabled = true)
	public void testarUsuarioSemPermissaoDeAcesso() {
		acao.clicarNoElemento(campoCodigoRelatorio, 0);
		rotina.aguardarProcessarRotina();
		rotina.limparCampoERealizarNovaConsulta();
		boolean resultadoFalhou = true;
		int posicao = 0;
		try {
			while (!acao.localizarElementos(campoCodigoRelatorio).get(posicao).getAttribute("value").equals("rger2")) {
				if (acao.localizarElementos(barraRolagemProximoRelatorioDesabilitada).size() == 0) {
					acao.clicarNoElemento(barraRolagemProximoRelatorio);
					rotina.aguardarProcessarRotina();
					posicao = -1;
				}
				posicao++;
			}
		} catch (IndexOutOfBoundsException e) {
			testar.testePassou();
			resultadoFalhou = false;
		}
		if (resultadoFalhou)
			testar.testeFalhou();
	}

	public void selecionarRelatorioParaEdicao(String relatorio) {
		rotina.aguardarProcessarRotina();
		acao.clicarNoElemento(campoCodigoRelatorio, 0);
		rotina.aguardarProcessarRotina();
		rotina.limparCampoERealizarNovaConsulta();
		int posicao = 0;
		while (!acao.localizarElementos(campoCodigoRelatorio).get(posicao).getAttribute("value").equals(relatorio)) {
			if (acao.localizarElementos(barraRolagemProximoRelatorioDesabilitada).size() == 0) {
				acao.clicarNoElemento(barraRolagemProximoRelatorio);
				rotina.aguardarProcessarRotina();
				posicao = -1;
			}
			posicao++;
		}
		acao.clicarNoElemento(campoCodigoRelatorio, posicao);
		rotina.aguardarProcessarRotina();
	}

}
